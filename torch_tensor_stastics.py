import torch

a=torch.ones(8)
b=a.view(2, 4)
c=a.view(2, 2, 2)
print('a=torch.ones(8):', a)
print('b=a.view(2, 4): \n', b)
print('c=a.view(2, 2, 2): \n', c)
# print(torch.linalg.norm(c,1))
# print('torch.linalg.norm(a, 1):', torch.linalg.norm(a, 1), 'torch.linalg.norm(b, 1):', torch.linalg.norm(b, 1), 'torch.linalg.norm(c, 1):', torch.linalg.norm(c, 1))
# print('torch.linalg.norm(a, 2):', torch.linalg.norm(a, 2), 'torch.linalg.norm(b, 2):', torch.linalg.norm(b, 2), 'torch.linalg.norm(c, 2):', torch.linalg.norm(c, 2))
# print('torch.linalg.norm(b, 1, dim=1):', torch.linalg.norm(b, 1, dim=1), '\ntorch.linalg.norm(b, 1, dim=1, keepdim=True):\n', torch.linalg.norm(b, 1, dim=1, keepdim=True))
# print('torch.linalg.norm(c, 2, dim=1):', torch.linalg.norm(c, 2, dim=1), '\ntorch.linalg.norm(c, 2, dim=1, keepdim=True):\n', torch.linalg.norm(c, 2, dim=1, keepdim=True))

d=torch.arange(1, 9).reshape(2, 4)
print('d=torch.arange(1, 9).reshape(2, 4): \n', d)
print('d.min():', d.min(), 'd.max():', d.max())
min0, argmin0 = d.min(dim=0, keepdim=True)
print('min0, argmin0 = d.min(dim=0, keepdim=True):')
print('min0:\n', min0)
print('min0:\n', argmin0)
max1, argmax1 = d.max(dim=1, keepdim=True)
print('max1, argmax1 = d.max(dim=1, keepdim=True):')
print('max1:\n', max1)
print('max1:\n', argmax1)
dargmin0=d.argmin(dim=0)
print('dargmin0=d.argmin(dim=0):\n', dargmin0)
dargmax1=d.argmax(dim=1, keepdim=True)
print('dargmax1=d.argmax(dim=1, keepdim=True):\n', dargmax1)
top2=d.topk(2, dim=1)
print('top2=d.topk(2, dim=1):\n', top2)
top2, argtop2=d.topk(2, dim=1)
print('top2, argtop2=d.topk(2, dim=1):\n', top2, '\n', argtop2)
kthmin2, kthargmin2=d.kthvalue(2, dim=1, keepdim=True)
print('kthmin2, kthargmin2=d.kthvalue(2, dim=1, keepdim=True):\n', kthmin2, '\n', kthargmin2)

e=torch.randn(2, 3)
print('e=torch.randn(2, 3):\n', e)
print('e>=0:\n', e>=0)
print('e!=0:\n', e!=0)
print('e<0:\n', e<0)
print('e.le(0):\n', e.le(0))
print('e.eq(0):\n', e.eq(0))
print('e.gt(0):\n', e.gt(0))
print('torch.all(torch.eq(e, 0)):', torch.all(torch.eq(e, 0)))
print('torch.equal(e, torch.tensor(0.)):', torch.equal(e, torch.tensor(0.)))

torch.gather